#!/usr/bin/env python
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

import ast
import json
import logging
import os
import subprocess
import sys

WORKING_DIR = os.environ.get('HEAT_ATOMIC_WORKING',
                             '/var/lib/heat-config/heat-config-atomic')
OUTPUTS_DIR = os.environ.get('HEAT_ATOMIC_OUTPUTS',
                             '/var/run/heat-config/heat-config-atomic')
ATOMIC_CMD = os.environ.get('HEAT_ATOMIC_CMD', 'atomic')


def prepare_dir(path):
    if not os.path.isdir(path):
        os.makedirs(path, 0o700)


def write_input_file(file_path, content):
    with os.fdopen(os.open(
            file_path, os.O_CREAT | os.O_WRONLY, 0o700), 'w') as f:
        f.write(content.encode('utf-8'))


def main(argv=sys.argv):
    log = logging.getLogger('heat-config')
    handler = logging.StreamHandler(sys.stderr)
    handler.setFormatter(
        logging.Formatter(
            '[%(asctime)s] (%(name)s) [%(levelname)s] %(message)s'))
    log.addHandler(handler)
    log.setLevel('DEBUG')

    c = json.load(sys.stdin)

    prepare_dir(OUTPUTS_DIR)
    prepare_dir(WORKING_DIR)
    os.chdir(WORKING_DIR)

    env = os.environ.copy()

    input_values = dict((i['name'], i['value']) for i in c['inputs'])

    stdout, stderr = {}, {}
    config = c.get('config', '')
    if not config:
        log.debug("No 'config' input found, nothing to do.")
        response = {
            'deploy_stdout': stdout,
            'deploy_stderr': stderr,
            'deploy_status_code': 0,
        }
        json.dump(response, sys.stdout)
        return

    atomic_subcmd = config.get('command', 'install')
    image = config.get('image')

    if input_values.get('deploy_action') == 'DELETE':
        cmd = [
            'uninstall',
            atomic_subcmd,
            image
        ]
        subproc = subprocess.Popen(cmd, stdout=subprocess.PIPE,
                                   stderr=subprocess.PIPE, env=env)
        stdout, stderr = subproc.communicate()

        response = {
            'deploy_stdout': stdout,
            'deploy_stderr': stderr,
            'deploy_status_code': 0,
        }
        json.dump(response, sys.stdout)
        return

    env_file = input_values.get('env_file')
    if env_file:
        file = ast.literal_eval(env_file)
        file_name = file.get('file_name', '')
        content = file.get('content', '')
        if file_name:
            write_input_file(file_name, content)

    install_cmd = config.get('installcmd', '')
    name = config.get('name', c['id'])

    cmd = [
        ATOMIC_CMD,
        atomic_subcmd,
        image
    ]

    if atomic_subcmd == 'install':
        cmd.extend(
            [
                install_cmd,
                '--name %s' % name
            ]
        )

    log.debug('Running %s' % cmd)

    subproc = subprocess.Popen(cmd, stdout=subprocess.PIPE,
                               stderr=subprocess.PIPE, env=env)
    stdout, stderr = subproc.communicate()

    log.debug(stdout)
    log.debug(stderr)

    if subproc.returncode:
        log.error("Error running %s. [%s]\n" % (cmd, subproc.returncode))
    else:
        log.debug('Completed %s' % cmd)

    response = {}

    response.update({
        'deploy_stdout': stdout,
        'deploy_stderr': stderr,
        'deploy_status_code': subproc.returncode,
    })

    json.dump(response, sys.stdout)

if __name__ == '__main__':
    sys.exit(main(sys.argv))
