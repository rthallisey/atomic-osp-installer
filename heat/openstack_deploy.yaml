heat_template_version: 2014-10-16

#http://paste.fedoraproject.org/200162/14267900/

parameters:
  key_name:
    type: string
    default: default
  flavor:
    type: string
    default: m1.small
  image:
    type: string
    default: fedora-software-config

  RabbitPassword:
    default: guest
    description: The password for RabbitMQ
    type: string
    hidden: true

  RabbitUserName:
    default: guest
    description: The username for RabbitMQ
    type: string

  MysqlRootPassword:
    type: string
    description: The password for the DB
    hidden: true
    default: kolla

## KEYSTONE ##
  KeystoneUserName:
    default: admin
    description: The admin username for Keystone
    type: string

  KeystoneAdminPassword:
    default: 12345
    description: The admin username for Keystone
    type: string

  KeystoneAdminServicePort:
    default: 5000
    description: The admin username for Keystone
    type: string

  KeystoneAdminToken:
    default: 13245
    description: The admin username for Keystone
    type: string

  KeystoneAuthProtocol:
    default: http
    description: The admin username for Keystone
    type: string

  KeystoneDBPassword:
    default: kolla
    description: The admin username for Keystone
    type: string

  NovaKeystonePassword:
    default: nova
    description: The admin username for Keystone
    type: string

  NovaKeystoneUser:
    default: nova
    description: The admin username for Keystone
    type: string

  GlanceKeystoneUser:
    default: glance
    description: The admin username for Keystone
    type: string

  GlanceKeystonePassword:
    default: glance
    description: The admin password for Keystone
    type: string

  AdminTenantName:
    default: admin
    description: The admin username for Keystone
    type: string

  DBRootPassword:
    default: kolla
    description: The admin username for Keystone
    type: string


resources:
  server:
    type: OS::Nova::Server
    properties:
      image: {get_param: image}
      flavor: {get_param: flavor}
      key_name: {get_param: key_name}
      user_data_format: SOFTWARE_CONFIG

  docker_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      config: |
        #!/bin/bash
        # FIXME(shardy): build into the image via diskimage-builder
        yum -y install docker-io
        systemctl start docker

  docker_deployment:
    type: OS::Heat::SoftwareDeployment
    properties:
      config:
        get_resource: docker_config
      server:
        get_resource: server

  rabbit_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
      - name: RABBITMQ_PASS
      - name: RABBITMQ_USER
      config: |
        #!/bin/bash
        # FIXME(shardy) pre-build images via docker pull to speed up deployment
        env  | grep "^RABBIT" > /tmp/rabbit.env
        MY_IP=$(ip route get $(ip route | awk '$1 == "default" {print $3}') | awk '$4 == "src" {print $5}')
        echo "RABBITMQ_SERVICE_HOST=$MY_IP" >> /tmp/rabbit.env
        docker run -d --name rabbitmq --net=host --env-file=/tmp/rabbit.env imain/fedora-rdo-rabbitmq | tee /tmp/test.log1

  rabbit_deployment:
    type: OS::Heat::SoftwareDeployment
    depends_on: docker_deployment
    properties:
      config:
        get_resource: rabbit_config
      server:
        get_resource: server
      input_values:
        RABBITMQ_PASS: {get_param: RabbitPassword}
        RABBITMQ_USER: {get_param: RabbitUserName}

  mariadb_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
      - name: MYSQL_ROOT_PASSWORD
      config: |
        #!/bin/bash
        # FIXME(shardy) pre-build images via docker pull to speed up deployment
        env  | grep "^MYSQL" > /tmp/mariadb.env
        MY_IP=$(ip route get $(ip route | awk '$1 == "default" {print $3}') | awk '$4 == "src" {print $5}')
        echo "MARIADB_SERVICE_HOST=$MY_IP" >> /tmp/mariadb.env
        docker run -d --name mariadb --net=host --env-file=/tmp/mariadb.env imain/fedora-rdo-mariadb | tee /tmp/test.log2

  mariadb_deployment:
    type: OS::Heat::SoftwareDeployment
    depends_on: rabbit_deployment
    properties:
      config:
        get_resource: mariadb_config
      server:
        get_resource: server
      input_values:
        MYSQL_ROOT_PASSWORD: {get_param: MysqlRootPassword}

  keystone_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
      - name: MYSQL_ROOT_PASSWORD
      - name: GLANCE_KEYSTONE_PASSWORD
      - name: GLANCE_KEYSTONE_USER
      - name: KEYSTONE_ADMIN_PASSWORD
      - name: KEYSTONE_ADMIN_SERVICE_PORT
      - name: KEYSTONE_ADMIN_TOKEN
      - name: KEYSTONE_AUTH_PROTOCOL
      - name: KEYSTONE_DB_PASSWORD
      - name: NOVA_KEYSTONE_PASSWORD
      - name: NOVA_KEYSTONE_USER
      - name: ADMIN_TENANT_NAME
      - name: DB_ROOT_PASSWORD
      config: |
        #!/bin/bash
        # FIXME(shardy) pre-build images via docker pull to speed up deployment
        #env | grep "^KEYSTONE" > /tmp/keystone.env
        env > /tmp/keystone.env
        MY_IP=$(ip route get $(ip route | awk '$1 == "default" {print $3}') | awk '$4 == "src" {print $5}')
        echo "KEYSTONE_ADMIN_SERVICE_HOST=$MY_IP" >> /tmp/keystone.env
        echo "KEYSTONE_PUBLIC_SERVICE_HOST=$MY_IP" >> /tmp/keystone.env
        echo "MARIADB_SERVICE_HOST=$MY_IP" >> /tmp/keystone.env
        docker run -d --name keystone --net=host --env-file=/tmp/keystone.env imain/fedora-rdo-keystone | tee /tmp/keystone.log

  keystone_deployment:
    type: OS::Heat::SoftwareDeployment
    depends_on: mariadb_deployment
    properties:
      config:
        get_resource: keystone_config
      server:
        get_resource: server
      input_values:
        MYSQL_ROOT_PASSWORD: {get_param: MysqlRootPassword}
        GLANCE_KEYSTONE_PASSWORD: {get_param: GlanceKeystonePassword}
        GLANCE_KEYSTONE_USER: {get_param: GlanceKeystoneUser}
        KEYSTONE_ADMIN_PASSWORD: {get_param: KeystoneAdminPassword}
        KEYSTONE_ADMIN_SERVICE_PORT: {get_param: KeystoneAdminServicePort}
        KEYSTONE_ADMIN_TOKEN: {get_param: KeystoneAdminToken}
        KEYSTONE_AUTH_PROTOCOL: {get_param: KeystoneAuthProtocol}
        KEYSTONE_DB_PASSWORD: {get_param: KeystoneDBPassword}
        NOVA_KEYSTONE_PASSWORD: {get_param: NovaKeystonePassword}
        NOVA_KEYSTONE_USER: {get_param: NovaKeystoneUser}
        ADMIN_TENANT_NAME: {get_param: AdminTenantName}
        DB_ROOT_PASSWORD: {get_param: DBRootPassword}
